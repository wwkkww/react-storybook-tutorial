{"version":3,"sources":["utilities.js","components/title/style.js","components/title/Title.js","components/button/style.js","components/button/Button.js","components/heroBanner/style.js","components/heroBanner/HeroBanner.js","App.js","serviceWorker.js","index.js"],"names":["colors","backgrounds","Heading1","styled","h1","props","reverse","Title","StyledButton","button","Button","onClick","children","Wrapper","div","img","HeroBanner","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAEaA,EACJ,UADIA,EAGC,UAHDA,EAIC,UAJDA,EAOA,UAGAC,EACC,UADDA,EAEC,U,kICXd,IAMeC,EANEC,IAAOC,GAAV,KAGH,SAACC,GAAD,OAAYA,EAAMC,QAAUN,EAAeA,KCCvCO,MAJf,SAAeF,GACb,OAAO,kBAAC,EAAD,CAAUC,QAASD,EAAMC,SAAzB,sB,siCCDT,IAAME,EAAeL,IAAOM,OAAV,KACP,SAACJ,GAAD,OAAYA,EAAMC,QAAUN,EAAeA,KAKpC,SAACK,GAAD,OAAYA,EAAMC,QAAUN,EAAeA,KAE7C,SAACK,GAAD,OAAYA,EAAMC,QAAUN,EAAoB,iBAGnD,SAACK,GAAD,OAAYA,EAAMC,QAAUN,EAAoBA,KACrC,SAACK,GAAD,OAAYA,EAAMC,QAAUN,EAAeA,KAE/C,SAACK,GAAD,OAAYA,EAAMC,QAAUN,EAAoBA,KAIxCG,YAAOK,EAAPL,CAAH,IACdH,EACWA,EAETA,EACWA,GAKGG,YAAOK,EAAPL,CAAH,IACbH,EACWA,EAETA,EACWA,GAKHG,IAAOM,OAAV,IAUMR,GChDjB,SAASS,EAAT,GAAiD,IAA/BC,EAA8B,EAA9BA,QAASL,EAAqB,EAArBA,QAAqB,EAAZM,SAEzC,OACE,kBAACJ,EAAD,CAAcF,QAASA,EAASK,QAASA,GAF3B,kB,w8BCDX,IAAME,EAAUV,IAAOW,IAAV,IAOEb,GAMME,IAAOY,IAAV,KASPZ,IAAOC,GAAV,KAMiBD,IAAOM,OAAV,IAWLR,GCVTe,MA1Bf,WACE,OACE,kBAACH,EAAD,KACE,kBAAC,EAAD,MACA,kBAACH,EAAD,QCMSO,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d8d73ea6.chunk.js","sourcesContent":["// Colors\n\nexport const colors = {\n  white: '#FFFFFF',\n  black: '#111111',\n  primary500: '#118AF5',\n  success500: '#64d136',\n  info500: '#31c7f9',\n  warning500: '#F7ce2a',\n  danger500: '#FF5121',\n};\n\nexport const backgrounds = {\n  primary100: '#CFF2FE',\n  primary800: '#05388E',\n  info100: '#D5FEFD',\n  info800: '#0F5490',\n  success100: '#ECFCD7',\n  warning100: '#FEF9D4',\n  danger100: '#FFE9D2',\n  secondary100: '#F3F3F3',\n};\n","import styled from 'styled-components';\nimport { colors } from '../../utilities';\n\nconst Heading1 = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: ${(props) => (props.reverse ? colors.white : colors.primary500)};\n`;\n\nexport default Heading1;\n","import React from 'react';\nimport Heading1 from './style';\n\nfunction Title(props) {\n  return <Heading1 reverse={props.reverse}>This is the Title</Heading1>;\n}\n\nexport default Title;\n","import styled from 'styled-components';\nimport { colors, backgrounds } from '../../utilities';\n\nconst StyledButton = styled.button`\n  color: ${(props) => (props.reverse ? colors.white : colors.primary500)};\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid;\n  border-color: ${(props) => (props.reverse ? colors.white : colors.primary500)};\n  border-radius: 2rem;\n  background: ${(props) => (props.reverse ? colors.primary500 : 'transparent')};\n\n  :hover {\n    color: ${(props) => (props.reverse ? colors.primary500 : colors.white)};\n    background-color: ${(props) => (props.reverse ? colors.white : colors.primary500)};\n    cursor: pointer;\n    border-color: ${(props) => (props.reverse ? colors.primary500 : colors.white)};\n  }\n`;\n\nconst StyledButtonSuccess = styled(StyledButton)`\n  color: ${colors.success500};\n  border: 2px solid ${colors.success500};\n  :hover {\n    color: ${colors.white};\n    background-color: ${colors.success500};\n    cursor: pointer;\n  }\n`;\n\nconst StyledButtonDanger = styled(StyledButton)`\n  color: ${colors.danger500};\n  border: 2px solid ${colors.danger500};\n  :hover {\n    color: ${colors.white};\n    background-color: ${colors.danger500};\n    cursor: pointer;\n  }\n`;\n\nconst ButtonBullet = styled.button`\n  height: 12px;\n  background-color: black;\n  border: none;\n  border-radius: 50%;\n  position: absolute;\n  bottom: -20%;\n  margin: auto;\n  display: block;\n  &:hover {\n    background-color: ${backgrounds.primary800};\n  }\n  &:last-of-type {\n    margin-left: 15px;\n  }\n`;\nexport { StyledButton, StyledButtonSuccess, StyledButtonDanger, ButtonBullet };\n","import React from 'react';\nimport { StyledButton, StyledButtonSuccess, StyledButtonDanger } from './style';\n\nexport function Button({ onClick, reverse, children }) {\n  const btnText = 'Default button';\n  return (\n    <StyledButton reverse={reverse} onClick={onClick}>\n      {btnText}\n    </StyledButton>\n  );\n}\n\nexport function ButtonSuccess({ onClick }) {\n  const btnText = 'Success button';\n  return <StyledButtonSuccess onClick={onClick}>{btnText}</StyledButtonSuccess>;\n}\n\nexport function ButtonDanger({ onClick }) {\n  const btnText = 'Danger button';\n  return <StyledButtonDanger onClick={onClick}>{btnText}</StyledButtonDanger>;\n}\n","import styled from 'styled-components';\nimport { backgrounds } from '../../utilities';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n  padding: 0.25em 1em;\n  background-color: ${backgrounds.primary100};\n  border-radius: 5px;\n  width: 960px;\n  height: 240px;\n`;\n\nexport const WrapperImage = styled.img`\n  max-height: 240px;\n  width: 960px;\n  object-fit: cover;\n  position: relative;\n  background-image: url('cat.png');\n  z-index: 0;\n`;\n\nexport const H1 = styled.h1`\n  position: absolute;\n  top: 20%;\n  left: 10%;\n`;\n\nexport const PaginationButton = styled.button`\n  height: 12px;\n  background-color: black;\n  border: none;\n  border-radius: 50%;\n  position: absolute;\n  bottom: -20%;\n  margin: auto;\n  display: block;\n\n  &:hover {\n    background-color: ${backgrounds.primary800};\n  }\n\n  &:first-of-type {\n    margin-left: 15px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { Wrapper, WrapperImage, H1, PaginationButton } from './style';\nimport Title from '../title/Title';\nimport { Button } from '../button/Button';\nimport { ButtonBullet } from '../button/style';\n\nfunction HeroBanner() {\n  return (\n    <Wrapper>\n      <Title />\n      <Button />\n    </Wrapper>\n  );\n}\n\nexport function HeroBannerImage({ state, title }) {\n  state = {\n    src: ['cat.jpg', 'cat1.jpg', 'cat2.jpg', 'cat3.jpg'],\n  };\n\n  const [index, handleIndex] = useState(0);\n  return (\n    <Wrapper>\n      <WrapperImage src={state.src[index]} alt=\"\" />\n      <H1>{title}</H1>\n      {/* <PaginationButton onClick={() => handleIndex(index + 1)}></PaginationButton>\n      <PaginationButton onClick={() => handleIndex(index - 1)}></PaginationButton> */}\n      <ButtonBullet onClick={() => handleIndex(index + 1)}></ButtonBullet>\n      <ButtonBullet onClick={() => handleIndex(index - 1)}></ButtonBullet>\n    </Wrapper>\n  );\n}\nexport default HeroBanner;\n","import React from 'react';\nimport './App.css';\nimport Title from './components/title/Title';\nimport { Button } from './components/button/Button';\nimport HeroBanner from './components/heroBanner/HeroBanner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HeroBanner />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}